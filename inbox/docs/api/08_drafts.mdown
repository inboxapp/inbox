Title: Drafts

A draft is a special kind of message which has not been sent, and therefore its body contents are mutable. Once sent, the body cannot be changed. Draft objects are identical to message objects sent via the API, except that they have an additional `version` parameter. A draft's ID doesn't change, but each time the draft is updated, its version parameter is updated as well.  Having a constant ID is useful for caching and repeated querying, while the unique version is used to prevent conflicting operations.


# Retrieving Drafts

```
:::xml
GET  https://api.nylas.com/n/<namespace_id>/drafts
GET  https://api.nylas.com/n/<namespace_id>/drafts/<draft_id>
```

This endpoint supports [filters](#filters), which allow you to fetch multiple drafts matching specific critera. The same parameters are supported as that of the [messages](#messages) endpoint.

# Creating a Draft

```
:::xml
POST https://api.nylas.com/n/<namespace_id>/drafts
```

Post body parameters:

* `subject`
* `to`
* `cc`
* `bcc`
* `from`
* `reply_to`
* `thread_id`
* `body`
* `file_ids`

Note that all of these parameters are optional. If omitted, an empty draft will still be created.


**Sample Post Body**

```
:::json
{
    "subject": "Dinner on Friday?",
    "to": [
        {
            "name": "Ben Bitdiddle",
            "email": "ben.bitdiddle@gmail.com"
        },
    ],
    "cc": [],
    "bcc": [],
    "body": "<html><body>....</body></html>",
    "file_ids": [
        "bgmzg0qp61oqrrmpadboiiyg3",
        "aikfl1kl73r69hevrm018jqzw"
    ]
    "version": 2
}
```

A successful response will contain the newly created [Draft](#draft) object.

Also note that creating a draft will fail if the files with the referenced `file_ids` have not been uploaded. See [Files](#files) for more details on how to upload and reference attachments.


## Replying to an existing thread

If the draft is a response to an existing thread, you should provide the thread's ID in the `thread_id` parameter and omit the `subject` parameter. Note that you must explicitly specify the message's recipients in the `to`, `cc` and `bcc` fields of the post body; this is to prevent any ambiguity about whom the message will be sent to.

```
:::json
{
    "thread_id": <thread_id>,
    "body": "<html><body>....</body></html>",
    "to": [
        {
            "name": "Bill Rogers",
            "email": "wbrogers@mit.edu"
        }
    ],
    "file_ids": [
        "bgmzg0qp61oqrrmpadboiiyg3",
        ...
    ],
}
```


# Updating a draft

Updating a draft is as simple as issuing a PUT request to the draft's URI.

```
:::xml
PUT https://api.nylas.com/n/<namespace_id>/drafts/<draft_id>
```

Put body parameters:

* `version`

The request body must contain the version of the draft you wish to update. Other fields are optional and will overwrite previous values.

Updating a draft returns a draft object with the same ID but different version. When submitting subsequent send or save actions, you must use this new version.

# Deleting a draft

To delete a draft simply issue a DELETE request to the draft's URI.

```
:::xml
DELETE https://api.nylas.com/n/<namespace_id>/drafts/<draft_id>
```

Delete body parameters:

* `version`

The request body must contain the version of the draft you wish to delete.
If the draft does not exist, this request will fail.


# Sending a draft

The Nylas API provides a single API for sending both new messages and existing drafts. See [Sending](#sending) for more information.


# Listing Threads with Drafts

In some scenarios, you may want to display all of the threads in the user's inbox that have draft messages. To get a list of all threads with drafts, use the [Threads](#threads) API call with a [filter](#filters) on the `drafts` tag:

```
:::xml
GET https://api.nylas.com/n/<namespace_id>/threads?tag=drafts
```


# Using an email alias

If you would like to use an alias for sending and/or receiving emails, you can set the `from` and `reply_to` fields. Note that if the alias is not set up properly, the Gmail API will replace the `From` header with the original sender.

```
:::json
{
    "subject": "Dinner on Friday?",
    "to": [
        {
            "name": "Ben Bitdiddle",
            "email": "ben.bitdiddle@gmail.com"
        },
    ],
    "from": [
        {
            "name": "Bill Rogers",
            "email": "wbrogers@mit.edu"
        },
    ],
    "reply_to": [
        {
            "name": "Bill Rogers",
            "email": "wbrogers@mit.edu"
        },
    ],
    "cc": [],
    "bcc": [],
    "body": "<html><body>....</body></html>",
    "file_ids": [
        "bgmzg0qp61oqrrmpadboiiyg3",
        "aikfl1kl73r69hevrm018jqzw"
    ]
    "version": 2
}
```
