#!/usr/bin/env python
import os
import click
import sqlalchemy

from alembic.config import Config as alembic_config
from alembic import command as alembic_command

from inbox.config import engine_uri, get_db_info

from inbox.ignition import init_db
from inbox.ignition import main_engine
from inbox.sqlalchemy_ext.util import ForceStrictMode

inbox_db_engine = main_engine(pool_size=1)

basic_engine = sqlalchemy.create_engine(
    engine_uri(), listeners=[ForceStrictMode()], echo=False)



def create_mysql(**kwargs):
    print 'Creating database: {name} ({engine})'.format(**kwargs)
    basic_engine.execute("CREATE DATABASE IF NOT EXISTS {name} DEFAULT CHARACTER "
                         "SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci;".
                         format(**kwargs))
    basic_engine.execute("GRANT ALL PRIVILEGES ON {name}.* TO "
                         "{user}@localhost IDENTIFIED BY '{user}'".
                         format(**kwargs))

def create_postgres(**kwargs):
    print 'Creating database: {name} ({engine})'.format(**kwargs)

    conn = basic_engine.connect()
    conn.connection.set_isolation_level(0)
    conn.execute("DROP DATABASE IF EXISTS {name}".format(**kwargs))
    conn.execute("CREATE DATABASE {name}".format(**kwargs))
    conn.connection.set_isolation_level(1)
    conn.execute("GRANT ALL ON DATABASE {name} TO {user}".format(**kwargs))


@click.command()
@click.option('--prod/--no-prod', default=False,
              help='Disable creating the test database for production '
                   'deployments')
def main(prod):
    if not prod:
        '''
        print 'Creating database: test'
        basic_engine.execute(
            "CREATE DATABASE IF NOT EXISTS test DEFAULT CHARACTER SET utf8mb4 "
            "DEFAULT COLLATE utf8mb4_general_ci")
        basic_engine.execute("GRANT ALL PRIVILEGES ON test.* TO "
                             "inboxtest@localhost IDENTIFIED BY 'inboxtest'")
        '''
    db_info = get_db_info('test')
    if db_info['engine'] == 'mysql':
        create_mysql(**db_info)
    elif db_info['engine'] == 'postgres':
        create_postgres(**db_info)
    else:
        raise Exception("Unknown database engine")

    init_db(inbox_db_engine)

    # Stamp initial alembic revision
    if inbox_db_engine.dialect.has_table(inbox_db_engine, "alembic_version"):
        res = inbox_db_engine.execute(
            "SELECT version_num from alembic_version")
        current_revision = [r for r in res][0][0]
        assert current_revision, \
            'Need current revision in alembic_version table.'
        print 'Already revisioned by alembic {0}'.format(current_revision)
    else:
        alembic_ini_filename = os.environ.get('ALEMBIC_INI_PATH',
                                              'alembic.ini')
        assert os.path.isfile(alembic_ini_filename), \
            'Must have alembic.ini file at {0}'.format(alembic_ini_filename)
        alembic_cfg = alembic_config(alembic_ini_filename)

        print 'Stamping with alembic revision'
        alembic_command.stamp(alembic_cfg, "head")

    print 'Finished setting up database'


if __name__ == '__main__':
    main()
