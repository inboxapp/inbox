#!/usr/bin/env python
import os
import sys
import click

# Check that the inbox package is installed. It seems Vagrant may sometimes
# fail to provision the box appropriately; this check is a reasonable
# approximation of "Did the setup script run?"
try:
    from inbox.config import config as inbox_config
except ImportError:
    sys.exit("Could not find Inbox installation. "
             "Maybe the Vagrant box provisioning didn't succeed?\n"
             "Try running sudo ./setup.sh")

from setproctitle import setproctitle; setproctitle('inbox-api')
from gevent import monkey; monkey.patch_all()
import gevent_openssl; gevent_openssl.monkey_patch()

from gevent.pywsgi import WSGIServer

from nylas.api.wsgi import NylasWSGIHandler
from nylas.logging import get_logger, configure_logging
from inbox.util.startup import preflight, load_overrides

syncback = None
http_server = None


@click.command()
@click.option('--prod/--no-prod', default=False,
              help='Disables the autoreloader and potentially other '
                   'non-production features.')
@click.option('--start-syncback/--no-start-syncback', default=True,
              help='Also start the syncback service')
@click.option('-c', '--config', default=None,
              help='Path to JSON configuration file.')
@click.option('-h', '--host', default='', help='Host to run flask app on.')
@click.option('-p', '--port', default=5555, help='Port to run flask app on.')
def main(prod, start_syncback, config, host, port):
    """ Launch the Inbox API service. """
    configure_logging(log_level=inbox_config.get('LOGLEVEL'))

    if config is not None:
        config_path = os.path.abspath(config)
        load_overrides(config_path)

    if prod:
        start(host, port, start_syncback)
    else:
        preflight()
        from werkzeug.serving import run_with_reloader
        run_with_reloader(lambda: start(host, port, start_syncback))


def start(host, port, start_syncback):
    # We need to import this down here, because this in turn imports
    # ignition.engine, which has to happen *after* we read any config overrides
    # for the database parameters. Boo for imports with side-effects.
    from inbox.api.srv import app

    if start_syncback:
        # start actions service
        from inbox.transactions.actions import SyncbackService
        syncback = SyncbackService(0, 1)
        syncback.start()

    nylas_logger = get_logger()

    http_server = WSGIServer((host, int(port)), app, log=nylas_logger,
                             handler_class=NylasWSGIHandler)
    nylas_logger.info('Starting API server', port=port)
    http_server.serve_forever()

    if start_syncback:
        syncback.join()

if __name__ == '__main__':
    main()
